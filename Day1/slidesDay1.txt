before organisational slide introduce myself as instructor.

no need for introduction of students since they all know eachother, pass down marker and post-its they can write their names

- slide 1: organisational. - one person should remind us of breaks


- slide 3: The Designer-Developer Handoff:

"The developer handoff is often the most critical — yet frustrating — stage in the development
process of a digital product: the stage when a design or prototype is ready for developers to
implement.

One of the problems with the designer-developer handoff might lie in the terminology itself.
“Handoff’ suggests that the design is handed to the developer, and it’s now the developer’s 
responsibility to bring the product to life. However, no design is complete until the product 
is used by users. Therefore, it’s imperative that designers and developers communicate 
throughout the design and development phases.

In the traditional workflow, designers work in silos, between the discovery phase and 
development, to create pixel-perfect mock-ups based on a brief. Then, after client sign-off, 
they’d throw them over the wall to the developers. This process is fraught with problems. 
Because even though designers go to great lengths to create digital solutions that are 
perfectly measured and consistently crafted, designs and design systems do not fluently 
translate to development systems.

Part of the problem is that the more the designer does to a UI, the more they must 
communicate to a developer. So, it is not enough to hand over a Sketch design file, 
for example, and leave the developer to run with it. Designers must provide design specs 
that explain how all the moving pieces need to be laid out, spaced, styled, colored, 
engaged with and so on. It has been the only way to ensure that an app ends up pixel-perfect 
in the end. Even then, it still requires a lot of implementation on the part of the developer 
once they are inside their IDE.

Developers are not typically in the habit of coding with HTML and CSS, which is tedious work 
and only represents the UI. There is a lot more code behind the scenes that makes a web app 
work and not all developers are adept at or interested in learning to write the UI markup. 
When they are forced into this position, the steep learning curve adds more time to projects 
and the resulting reworks and debugging sends costs spiraling out of control. 

- Improve Designer-Developer Communication:

Good communication is key in pretty much any relationship, 
so it makes sense that it’s a requirement for a smooth design-to-dev handoff. Communication 
breakdowns can result in all kinds of issues and misunderstandings — even in different 
interpretations of the same goals, which can lead to confusing or downright bad UX. 
And no product team has time for that."





- slide 5: the image - only general introduction no details about HTML. 
Try out the website without css using the chrome extension



- Slide 6: Hyper Text Markup Language: The idea and terminology evolved from the "marking up" of paper manuscripts 
(i.e., the revision instructions by editors).
Markup refers to data included in an electronic document which is distinct from the document's content in that it is 
typically not included in representations of the document for end users.
Markup is often used to control the display of the document or to enrich its content to facilitate automated processing.


- slide 8: The DOM (Document Object Model) is a representation that contains all elements of an HTML document, 
their format, and the browser state at a specific moment. 
The DOM structure is usually represented as a tree of nodes, 
where we can see which nodes (such as <html>) have other nodes within, such as <head>.

The objects can be manipulated programmatically. 
Any visible changes occurring may then be reflected in the display of the document.



- Slide 12: Headings are block elements. 
<h1> is a  first level heading tag. Normally there’s only one of these on a page, 
    and it’s used to indicate the most important header.
    Only use one <h1> per page - this should represent the main heading/subject for the whole
    page. Also, do not skip heading levels - start with <h1>, then use <h2>, and so on

<h1> defines the most important heading. <h6> defines the least important heading.

    <h2> to <h6> it’s fine to use more than one on a page. 
    Note that these heading tags help Google’s web crawlers understand what a page is about, 
    and therefore are crucial for SEO. 
    They also set default styling for any text they wrap 
    (so an H1, for instance, will have bigger, bolder font than a paragraph, by default in all modern browsers).

<p>  element represents a paragraph of text.



the <script> tag is used to embed a client-side script (JavaScript).
The <script> element either contains scripting statements, 
or it points to an external script file through the src attribute.



<div> container for flow content. 
It has no effect on the content or layout until styled in some way using CSS 



<img> element:
The src attribute is required, and contains the path to the image you want to embed.
The alt attribute holds a text description of the image, 
which isn't mandatory but is incredibly useful for accessibility — 
screen readers read this description out to their users so they know what the image means. 
Alt text is also displayed on the page if the image can't be loaded for some reason: 
for example, network errors, content blocking.


also talk about:
<label for="age">Age</label>
<input type="number" id="age">
<select> <option>




- slide 20:
responsive web design: back in the days
they needed to create different html pages for different devices. But with responsive webdesign
we need one html document that can be manipulated and styled using css to meet the siZes of any device-width


- slide 21: why responsive design came to life? in the past only very few users surfed 
the internet on their mobile devices dew to the huge webpages in comparison with the display


